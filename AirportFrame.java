
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

/**
 *
 * Description: GUI for Flight Manager
 *
 * @author Brent Garcia
 *
 * @version 1.0
 *
 */
public class AirportFrame extends javax.swing.JFrame {

    /**
     * Creates new form JFrame
     */
    public AirportFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        colorLabel = new javax.swing.JLabel();
        colorSlider = new javax.swing.JSlider();
        airlineLabel = new javax.swing.JLabel();
        airportLabel = new javax.swing.JLabel();
        destinationLabel = new javax.swing.JLabel();
        departureLabel = new javax.swing.JLabel();
        arrivalLabel = new javax.swing.JLabel();
        airlineTf = new javax.swing.JTextField();
        departureAirportTf = new javax.swing.JTextField();
        destinationAirportTf = new javax.swing.JTextField();
        departureTimeTf = new javax.swing.JTextField();
        arrivalTimeTf = new javax.swing.JTextField();
        itineraryCb = new javax.swing.JComboBox<>();
        itinSelectLabel = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Flight Reservation");
        setPreferredSize(new java.awt.Dimension(475, 500));

        mainPanel.setBackground(new java.awt.Color(102, 102, 102));

        colorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        colorLabel.setText("Choose Color");
        colorLabel.setToolTipText("");

        colorSlider.setMaximum(255);
        colorSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                colorSliderStateChanged(evt);
            }
        });

        airlineLabel.setText("Airline:");

        airportLabel.setText("Departure Airport:");

        destinationLabel.setText("Destination Airport:");

        departureLabel.setText("Departure Time:");

        arrivalLabel.setText("Arrival Time:");

        // itineraryCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        itinSelectLabel.setText("Select Itinerary Object:");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addGap(71, 71, 71)
                                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                                                .addComponent(colorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(colorSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addGap(79, 79, 79)
                                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(itinSelectLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                                        .addComponent(airportLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(airlineLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(destinationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(departureLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(arrivalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(61, 61, 61)
                                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(airlineTf, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                                        .addComponent(departureAirportTf)
                                                        .addComponent(destinationAirportTf)
                                                        .addComponent(departureTimeTf)
                                                        .addComponent(arrivalTimeTf))))
                                .addContainerGap(59, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(itineraryCb, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59))
        );
        mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(airlineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(airlineTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(airportLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(departureAirportTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(destinationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                                        .addComponent(destinationAirportTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(departureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(departureTimeTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(arrivalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(arrivalTimeTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(itineraryCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addComponent(itinSelectLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(3, 3, 3)))
                                .addGap(38, 38, 38)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(colorLabel)
                                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(colorSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void colorSliderStateChanged(javax.swing.event.ChangeEvent evt) {
        // TODO add your handling code here:
        colorLabel.setText(String.valueOf(colorSlider.getValue()));
        mainPanel.setBackground(new java.awt.Color(colorSlider.getValue(), colorSlider.getValue(), colorSlider.getValue()));
        mainPanel.repaint();
    }

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {

        try { //Convert Airline and Check if valid entry
            Airline itAirline = Airline.valueOf(airlineTf.getText());
            if (itAirline == Airline.United
                    || (itAirline == Airline.Delta)
                    || (itAirline == Airline.American)
                    || (airlineTf.getText().equals(""))) {
                System.out.println(itAirline);
            }

        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, "Airline unavailable. Please choose another airline",
                    "Airline", JOptionPane.ERROR_MESSAGE);
        }

        Airport src = Airport.valueOf(departureAirportTf.getText());
        try { //Convert Departure Airport and Check if valid entry
            if (departureAirportTf.getText().equals("PHX")
                    || departureAirportTf.getText().equals("LAX")
                    || departureAirportTf.getText().equals("SFO")
                    || departureAirportTf.getText().equals("NRT")
                    || departureAirportTf.getText().equals("SIN")) {
                System.out.println(src);
            }
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, "Departure Airport unavailable. Please choose another airport",
                    "Depature Airport", JOptionPane.ERROR_MESSAGE);
        }

        Airport dst = Airport.valueOf(destinationAirportTf.getText());
        try { //Convert Destination Airport and Check if valid entry
            if (destinationAirportTf.getText().equals("PHX")
                    || destinationAirportTf.getText().equals("LAX")
                    || destinationAirportTf.getText().equals("SFO")
                    || destinationAirportTf.getText().equals("NRT")
                    || destinationAirportTf.getText().equals("SIN")) {
                System.out.println(dst);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Destination Airport unavailable. Please choose another airport",
                    "Destination Airport", JOptionPane.ERROR_MESSAGE);
        }

        //Convert Departure Time and Check if valid.
        String dStr = String.valueOf(departureTimeTf.getText());
        int h;
        int m;
        Time depTime;
        //if (!dStr.equals("")) {
        h = Integer.parseInt(dStr.substring(0, 1));
        m = Integer.parseInt(dStr.substring(2, 4));
        depTime = new Time(h, m);

        //}
        try {
            String str = String.valueOf(departureTimeTf.getText());
            DateFormat format = new SimpleDateFormat("H:mm a");
            Date date1 = format.parse(str);// may not need.
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Incorrect format for departure time.",
                    "Destination Airport", JOptionPane.ERROR_MESSAGE);
        }

        //Convert Arrival Time and Check if valid.
        //Populate combo box
        FlightManagerTest fmt = new FlightManagerTest();
        Itinerary[] iTest = fmt.manager.findItineraries(src, dst, depTime);
        String[] iTestInt = new String[iTest.length];
        for (int i = 0; i < iTest.length; i++) {
            iTestInt[i] = Integer.toString(i + 1);
        }
        itineraryCb.setModel(new javax.swing.DefaultComboBoxModel(iTestInt));
        System.out.println(iTest.length);
        System.out.println(iTestInt.length);

    }

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try { //Convert Airline and Check if valid entry
            Airline itAirline = Airline.valueOf(airlineTf.getText());
            if (itAirline == Airline.United
                    || (itAirline == Airline.Delta)
                    || (itAirline == Airline.American)
                    || (airlineTf.getText().equals(""))) {
                System.out.println(itAirline);
            }

        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, "Airline unavailable. Please choose another airline",
                    "Airline", JOptionPane.ERROR_MESSAGE);
        }

        Airport src = Airport.valueOf(departureAirportTf.getText());
        try { //Convert Departure Airport and Check if valid entry
            if (departureAirportTf.getText().equals("PHX")
                    || departureAirportTf.getText().equals("LAX")
                    || departureAirportTf.getText().equals("SFO")
                    || departureAirportTf.getText().equals("NRT")
                    || departureAirportTf.getText().equals("SIN")) {
                System.out.println(src);
            }
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, "Departure Airport unavailable. Please choose another airport",
                    "Depature Airport", JOptionPane.ERROR_MESSAGE);
        }

        Airport dst = Airport.valueOf(destinationAirportTf.getText());
        try { //Convert Destination Airport and Check if valid entry
            if (destinationAirportTf.getText().equals("PHX")
                    || destinationAirportTf.getText().equals("LAX")
                    || destinationAirportTf.getText().equals("SFO")
                    || destinationAirportTf.getText().equals("NRT")
                    || destinationAirportTf.getText().equals("SIN")) {
                System.out.println(dst);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Destination Airport unavailable. Please choose another airport",
                    "Destination Airport", JOptionPane.ERROR_MESSAGE);
        }

        //Convert Departure Time and Check if valid.
        String dStr = String.valueOf(departureTimeTf.getText());
        int h;
        int m;
        Time depTime;
        //if (!dStr.equals("")) {
        h = Integer.parseInt(dStr.substring(0, 1));
        m = Integer.parseInt(dStr.substring(2, 4));
        depTime = new Time(h, m);

        //}
        try {
            String str = String.valueOf(departureTimeTf.getText());
            DateFormat format = new SimpleDateFormat("H:mm a");
            Date date1 = format.parse(str);// may not need.
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Incorrect format for departure time.",
                    "Destination Airport", JOptionPane.ERROR_MESSAGE);
        }

        FlightManagerTest fmt = new FlightManagerTest();
        Itinerary[] iTest = fmt.manager.findItineraries(src, dst, depTime);
        String[] iTestInt = new String[iTest.length];
        for (int i = 0; i < iTest.length; i++) {
            iTestInt[i] = Integer.toString(i + 1);
        }

        //COPIED SEARCH BUTTON TO HERE
        if (iTest.length > 0) {
            JOptionPane.showMessageDialog(null, "Flight search successful!",
                    "Destination Airport", JOptionPane.INFORMATION_MESSAGE);
            FlightFrame flight = new FlightFrame();
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    new FlightFrame().setVisible(true);
                }
            });
        }
    }
    //End of search Button

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AirportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AirportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AirportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AirportFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AirportFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel airlineLabel;
    private javax.swing.JTextField airlineTf;
    private javax.swing.JLabel airportLabel;
    private javax.swing.JLabel arrivalLabel;
    private javax.swing.JTextField arrivalTimeTf;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JSlider colorSlider;
    private javax.swing.JTextField departureAirportTf;
    private javax.swing.JLabel departureLabel;
    private javax.swing.JTextField departureTimeTf;
    private javax.swing.JTextField destinationAirportTf;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JLabel itinSelectLabel;
    private javax.swing.JComboBox<String> itineraryCb;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton viewButton;
    // End of variables declaration
}
